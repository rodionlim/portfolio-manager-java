import groovy.transform.Memoized

import java.text.SimpleDateFormat

plugins {
    id 'com.diffplug.spotless' version '6.25.0'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'application'
}

if (!JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_21)) {
    throw new GradleException("Java 21 or later is required to build Portfolio Manager.\n" +
            "  Detected version ${JavaVersion.current()}")
}

group = 'com.rodion.adelie'

defaultTasks 'build', 'javadoc'

def buildAliases = ['dev': [
        'spotlessApply',
        'build',
        'javadoc'
]]

def expandedTaskList = []
gradle.startParameter.taskNames.each {
    expandedTaskList << (buildAliases[it] ? buildAliases[it] : it)
}
gradle.startParameter.taskNames = expandedTaskList.flatten()

tasks.register("dev")

allprojects {
    apply plugin: 'java-library'
    apply plugin: 'io.spring.dependency-management'
    apply from: "${rootDir}/gradle/versions.gradle"

    version = calculateVersion()

    repositories {
        mavenCentral()
    }

    apply plugin: 'com.diffplug.spotless'
    spotless {
        java {
            target fileTree('.') {
                include '**/*.java'
                exclude '**/build/**', '**/build-*/**'
            }
            toggleOffOn()
            googleJavaFormat(googleJavaFormat)
            removeUnusedImports()
            trimTrailingWhitespace()
            endWithNewline()
        }
    }

    javadoc {
        options.addStringOption('Xdoclint:all,-missing', '-quiet')
        options.addStringOption('Xmaxerrs','65535')
        options.addStringOption('Xmaxwarns','65535')
        options.addStringOption('Xwerror', '-html5')
        options.encoding = 'UTF-8'
    }
}

jar { enabled = false }

dependencies {
    implementation project(':adelie')
}

application {
    mainClass = 'com.rodion.adelie.Adelie'
}

applicationDefaultJvmArgs = [
        // ADELIE_HOME is replaced by a doFirst block in the run task.
        '-Dadelie.home=ADELIE_HOME',
        // We shutdown log4j ourselves, as otherwise this shutdown hook runs before our own and whatever
        // happens during shutdown is not logged.
        '-Dlog4j.shutdownHookEnabled=false',
        // Disable JNI lookups in log4j messages to improve security
        '-Dlog4j2.formatMsgNoLookups=true',
]

def buildDirectory = layout.buildDirectory

run {
    args project.hasProperty("adelie.run.args") ? project.property("adelie.run.args").toString().split("\\s+") : []
    doFirst {
        applicationDefaultJvmArgs = applicationDefaultJvmArgs.collect {
            it.replace('ADELIE_HOME', buildDirectory.dir("adelie").get().asFile.toString())
        }
    }
}

startScripts {
    defaultJvmOpts = applicationDefaultJvmArgs + [
            "-XX:G1ConcRefinementThreads=2",
            "-XX:G1HeapWastePercent=15",
            "-XX:MaxGCPauseMillis=100"
    ]
    unixStartScriptGenerator.template = resources.text.fromFile("${projectDir}/adelie/src/main/scripts/unixStartScript.txt")
    doLast { tweakStartScript(startScripts) }
}

@Memoized
def calculateVersion() {
    // Regex pattern for basic calendar versioning, with provision to omit patch rev
    def calVerPattern = ~/\d+\.\d+(\.\d+)?(-.*)?/

    if (project.hasProperty('version') && (project.version =~ calVerPattern)) {
        return "${project.version}"
    } else {
        // If no version is supplied or it doesn't match the semantic versioning, calculate from git
        println("Generating project version as supplied is version not semver: ${project.version}")
        def gitDetails = getGitCommitDetails(10) // Adjust length as needed
        return "${gitDetails.date}-develop-${gitDetails.hash}"
    }
}

def getGitCommitDetails(length = 8) {
    try {
        def gitFolder = "$projectDir/.git/"
        if (!file(gitFolder).isDirectory()) {
            gitFolder = file(gitFolder).text.substring(length).trim() + "/"
        }
        def takeFromHash = length
        def head = new File(gitFolder + "HEAD").text.split(":")
        def isCommit = head.length == 1

        def commitHash, refHeadFile
        if (isCommit) {
            commitHash = head[0].trim().take(takeFromHash)
            refHeadFile = new File(gitFolder + "HEAD")
        } else {
            refHeadFile = new File(gitFolder + head[1].trim())
            commitHash = refHeadFile.text.trim().take(takeFromHash)
        }

        // Use head file modification time as a proxy for the build date
        def lastModified = new Date(refHeadFile.lastModified())
        // Format the date as "yy.M" (e.g. 24.3 for March 2024)
        def formattedDate = new SimpleDateFormat("yy.M").format(lastModified)

        return [hash: commitHash, date: formattedDate]
    } catch (Exception e) {
        logger.info('Could not calculate git commit details, using defaults (run with --info for stacktrace)')
        logger.info('Error retrieving git commit details', e)
        return [hash: "xxxxxxxx", date: "00.0"]
    }
}

def tweakStartScript(createScriptTask) {
    def shortenWindowsClasspath = { line ->
        line.replaceAll(/^set CLASSPATH=.*$/, "set CLASSPATH=%APP_HOME%/lib/*")
    }

    createScriptTask.unixScript.text = createScriptTask.unixScript.text.replace('ADELIE_HOME', '\$APP_HOME')
    createScriptTask.windowsScript.text = createScriptTask.windowsScript.text.replace('ADELIE_HOME', '%~dp0..')

    // Prevent the error originating from the 8191 chars limit on Windows
    createScriptTask.windowsScript.text =
            createScriptTask.windowsScript
                    .readLines()
                    .collect(shortenWindowsClasspath)
                    .join('\r\n')
}
